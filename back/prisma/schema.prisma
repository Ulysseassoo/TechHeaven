// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @unique @default(uuid())
  firstname                 String?
  lastname                  String?
  email                     String                @unique @db.VarChar(255)
  phone                     String?
  password                  String
  role                      String
  has_confirmed_account     Boolean               @default(false)
  created_at                DateTime              @default(now())
  deleted_at                DateTime?
  last_updated_password     DateTime?
  number_connexion_attempts Int                   @default(0)
  blocked_until             DateTime?
  addresses                 Address[]
  preferences               Preference[]
  passwordRecovery          PasswordRecovery?
  Cart                      Cart[]
  Order                     Order[]
  ProductHasPromotion       ProductHasPromotion[]
}

model Address {
  id          String  @id @unique @default(uuid())
  city        String
  country     String
  postal_code String
  other       String?
  address     String
  is_selected String
  user        User    @relation(fields: [user_id], references: [id])
  user_id     String
}

model Alert {
  id          String       @id @unique @default(uuid())
  name        String
  type        String
  param       String?
  preferences Preference[]
}

model Preference {
  user_id  String
  alert_id String
  status   Boolean
  user     User    @relation(fields: [user_id], references: [id])
  alert    Alert   @relation(fields: [alert_id], references: [id])

  @@id([user_id, alert_id])
}

model PasswordRecovery {
  id                   String    @id @unique @default(uuid())
  code_validation_time DateTime?
  last_request         DateTime?
  verification_code    String?
  User                 User      @relation(fields: [user_id], references: [id])
  user_id              String    @unique
}

model Category {
  id                 String               @id @unique @default(uuid())
  name               String
  products           Product[]
  ProductHasCategory ProductHasCategory[]
}

model Product {
  id                  String                @id @unique @default(uuid())
  name                String
  description         String
  brand               String
  price               Float
  promo               Float?
  photo               String?
  stock_quantity      Int
  categoryId          String?
  lowStockAlert       Boolean               @default(false)
  category            Category?             @relation(fields: [categoryId], references: [id])
  CartHasProducts     CartHasProducts[]
  ProductHasCategory  ProductHasCategory[]
  ProductHasPromotion ProductHasPromotion[]
}

model Cart {
  id                 Int               @id @default(autoincrement())
  created_at         DateTime
  status             String
  user_id            String
  user               User              @relation(fields: [user_id], references: [id])
  carts_has_products CartHasProducts[]
}

model CartHasProducts {
  cart_id    Int
  product_id String
  quantity   Int
  unit_price String
  cart       Cart    @relation(fields: [cart_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@id([cart_id, product_id])
}

model Order {
  id            Int           @id @default(autoincrement())
  date          DateTime
  status        String
  total_amount  String
  user_id       String
  user          User          @relation(fields: [user_id], references: [id])
  order_details OrderDetail[]
  deliveries    Delivery[]
  payments      Payment[]
}

model OrderDetail {
  id         Int    @id @default(autoincrement())
  quantity   String
  unit_price String
  order_id   Int
  order      Order  @relation(fields: [order_id], references: [id])
}

model Delivery {
  id               Int    @id @default(autoincrement())
  address          String
  status           String
  following_number String
  order_id         Int
  order            Order  @relation(fields: [order_id], references: [id])
}

model Payment {
  id             Int    @id @default(autoincrement())
  paid_amount    String
  payment_method String
  status         String
  order_id       Int
  order          Order  @relation(fields: [order_id], references: [id])
}

model ProductHasCategory {
  product_id  String
  category_id String
  product     Product  @relation(fields: [product_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
}

model Promotion {
  id                      Int                   @id @default(autoincrement())
  type                    String
  created_at              DateTime
  expiry_date             DateTime
  is_one_time             Boolean
  products_has_promotions ProductHasPromotion[]
}

model ProductHasPromotion {
  product_id   String
  promotion_id Int
  user_id      String
  product      Product   @relation(fields: [product_id], references: [id])
  promotion    Promotion @relation(fields: [promotion_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])

  @@id([product_id, promotion_id, user_id])
}
