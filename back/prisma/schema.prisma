// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String             @id @unique @default(uuid())
  firstname                 String?
  lastname                  String?
  email                     String             @unique @db.VarChar(255)
  phone                     String?
  password                  String
  role                      String
  has_confirmed_account     Boolean            @default(false)
  created_at                DateTime           @default(now())
  deleted_at                DateTime?
  last_updated_password     DateTime?
  number_connexion_attempts Int                @default(0)
  blocked_until             DateTime?
  addresses                 Address[]
  preferences               Preference[]
  passwordRecovery          PasswordRecovery?
  Cart                      Cart[]
  Order                     Order[]
  UsedPromotions            UserHasPromotion[]
  invoices                  Invoice[]
}

model UserHasPromotion {
  user_id      String
  promotion_id String
  user         User      @relation(fields: [user_id], references: [id])
  promotion    Promotion @relation(fields: [promotion_id], references: [id])

  @@id([user_id, promotion_id])
}

model Address {
  id          String  @id @unique @default(uuid())
  city        String
  country     String
  postal_code String
  other       String?
  address     String
  is_selected Boolean @default(false)
  user        User    @relation(fields: [user_id], references: [id])
  user_id     String
}

model Alert {
  id          String       @id @unique @default(uuid())
  name        String
  type        String
  param       String?
  preferences Preference[]
}

model Preference {
  id        String  @id @unique @default(uuid())
  user_id   String
  alert_id  String
  isEnabled Boolean
  user      User    @relation(fields: [user_id], references: [id])
  alert     Alert   @relation(fields: [alert_id], references: [id])

  @@unique([user_id, alert_id])
}

model PasswordRecovery {
  id                   String    @id @unique @default(uuid())
  code_validation_time DateTime?
  last_request         DateTime?
  verification_code    String?
  User                 User      @relation(fields: [user_id], references: [id])
  user_id              String    @unique
}

model Category {
  id                 String               @id @unique @default(uuid())
  name               String
  products           Product[]
  ProductHasCategory ProductHasCategory[]
}

model Product {
  id                 String               @id @unique @default(uuid())
  name               String
  description        String
  brand              String
  price              Float
  promotion          Float?
  promotion_type     String?
  categoryId         String?
  quantity           Int
  category           Category?            @relation(fields: [categoryId], references: [id])
  CartHasProducts    CartHasProducts[]
  ProductHasCategory ProductHasCategory[]
}

model Cart {
  id                 String            @id @unique @default(uuid())
  created_at         DateTime          @default(now())
  promotion_id       String?
  user_id            String
  total              Int               @default(0)
  user               User              @relation(fields: [user_id], references: [id])
  promotion          Promotion?        @relation(fields: [promotion_id], references: [id])
  carts_has_products CartHasProducts[]
}

model CartHasProducts {
  id         String  @id @unique @default(uuid())
  cart_id    String
  product_id String
  quantity   Int
  unit_price String
  cart       Cart    @relation(fields: [cart_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id])
}

model Order {
  id            String        @id @unique @default(uuid())
  created_at    DateTime      @default(now())
  status        String        @default("En cours")
  total_amount  Int
  user_id       String
  user          User          @relation(fields: [user_id], references: [id])
  order_details OrderDetail[]
  delivery      Delivery?
  payment       Payment?
  Invoice       Invoice?
}

model OrderDetail {
  id                  String @id @unique @default(uuid())
  quantity            Int
  product_id          String
  product_name        String
  product_description String
  unit_price          Int
  order_id            String
  order               Order  @relation(fields: [order_id], references: [id])
}

model Delivery {
  id               String @id @unique @default(uuid())
  address          String
  status           String @default("En cours")
  following_number String
  client_name      String
  order_id         String @unique
  order            Order  @relation(fields: [order_id], references: [id])
}

model Payment {
  id             String @id @unique @default(uuid())
  paid_amount    Int
  payment_method String
  status         String
  order_id       String @unique
  order          Order  @relation(fields: [order_id], references: [id])
}

model ProductHasCategory {
  product_id  String
  category_id String
  product     Product  @relation(fields: [product_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
}

model Promotion {
  id               String             @id @unique @default(uuid())
  type             String
  created_at       DateTime           @default(now())
  expiry_date      DateTime
  is_one_time      Boolean
  UserHasPromotion UserHasPromotion[]
  Cart             Cart[]
}

model Invoice {
  id              String          @id @unique @default(uuid())
  user_id         String
  user_firstname  String
  user_lastname   String
  order_id        String          @unique
  amount          Float
  status          String          @default("pending") // "pending", "paid", "cancelled"
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  paymentIntentId String?
  user            User            @relation(fields: [user_id], references: [id])
  order           Order?          @relation(fields: [order_id], references: [id])
  invoice_details InvoiceDetail[]
}

model InvoiceDetail {
  id                  String   @id @unique @default(uuid())
  quantity            Int
  product_id          String
  product_name        String
  product_description String
  unit_price          Int
  invoice_id          String
  invoice             Invoice? @relation(fields: [invoice_id], references: [id])
}
