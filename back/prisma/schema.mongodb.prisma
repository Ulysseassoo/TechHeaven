generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "./generated/mongodb-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_MONGODB")
}

model User {
  id                        String            @id @default(auto()) @map("_id") @db.ObjectId
  firstname                 String?
  lastname                  String?
  email                     String            @unique
  phone                     String?
  password                  String
  role                      String
  has_confirmed_account     Boolean           @default(false)
  created_at                DateTime          @default(now())
  deleted_at                DateTime?
  last_updated_password     DateTime?
  number_connexion_attempts Int               @default(0)
  blocked_until             DateTime?
  addresses                 Address[]
  preferences               Preference[]
  passwordRecovery          PasswordRecovery?
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  city        String
  country     String
  postal_code String
  other       String?
  address     String
  is_selected String
  user_id     String  @db.ObjectId
  user        User    @relation(fields: [user_id], references: [id])
}

model Alert {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  param       String?
  preferences Preference[]
}

model Preference {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id  String  @db.ObjectId
  alert_id String  @db.ObjectId
  status   Boolean
  user     User    @relation(fields: [user_id], references: [id])
  alert    Alert   @relation(fields: [alert_id], references: [id])

  @@unique([user_id, alert_id])
}

model PasswordRecovery {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  code_validation_time DateTime?
  last_request         DateTime?
  verification_code    String?
  user_id              String    @unique @db.ObjectId
  User                 User      @relation(fields: [user_id], references: [id])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[] @relation(fields: [], references: [])
}

model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  brand          String
  price          Float
  promo          Float?
  photo          String?
  stock_quantity Int
  lowStockAlert  Boolean   @default(false)
  categoryId     String?   @db.ObjectId
  category       Category? @relation(fields: [categoryId], references: [id])
}

model IdMapping {
  postgresId String @unique
  mongoId    String @id @map("_id") @db.ObjectId
}
