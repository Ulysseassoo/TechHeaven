import nodemailer from "nodemailer";
import { COMPANY_MAIL } from "../constants/index.mjs";
import { generateInvoicePDF } from './pdfGenerator.mjs';
import fs from 'fs';

const user = process.env.SMTP_USER;
const pass = process.env.SMTP_PASS;

const transporterOptions = {
    host: process.env.SMTP_HOST || "localhost",
    port: process.env.SMTP_PORT || 1025,
};
  
if (user !== "" && pass !== "") {
    transporterOptions.auth = { user, pass }; 
}

const transporter = nodemailer.createTransport(transporterOptions);

export const sendConfirmationEmail = async (userEmail, token) => {
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'Confirmation de votre compte',
        html: `<p>Merci de vous √™tre inscrit! Veuillez cliquer sur le lien suivant pour confirmer votre compte :</p><a href="${process.env.WEBSITE_URL}/confirmation?token=${token}">Confirmer</a>`
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.log("üöÄ ~ sendConfirmationEmail ~ error:", error)
        console.log("üöÄ ~ sendConfirmationEmail ~ error:", error.message)
        throw Error("Erreur lors de l\'envoi de l\'email");
    }
}

export const sendNotificationEmail = async (userEmail) => {
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'Compte bloqu√©',
        html: '<p>Votre compte a √©t√© bloqu√© temporairement en raison de trop de tentatives de connexion infructueuses. Veuillez r√©essayer dans 15 minutes.</p>'
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        throw Error("Erreur lors de l\'envoi de l\'email");
    }
}

export const sendPasswordRenewalNotification = async (userEmail) => {
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'Demande de renouvellement de mot de passe',
        html: `
        <h1>Changement de mot de passe requis</h1>
        <p>Bonjour,</p>
        <p>Nous vous contactons pour vous informer qu'il est n√©cessaire de changer votre mot de passe pour des raisons de s√©curit√©. Il est recommand√© de changer r√©guli√®rement votre mot de passe pour prot√©ger votre compte.</p>
        <p>Pour changer votre mot de passe, veuillez cliquer sur le lien ci-dessous :</p>
        <p><a href="${process.env.WEBSITE_URL}/account/profile?changePassword=true">Changer mon mot de passe</a></p>
        <p>Si vous n'avez pas demand√© ce changement, veuillez contacter notre service client√®le imm√©diatement.</p>
        <p>Merci,</p>
        <p>L'√©quipe de techheaven.com</p>
        `
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        throw Error("Erreur lors de l\'envoi de l\'email");
    }
}

export const sendPasswordResetEmail = async (userEmail, code) => {
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'Demande de r√©intialisation de mot de passe',
        html: `
        <h1>R√©intialiser votre mot de passe</h1>
        <p>Pour changer votre mot de passe, veuillez renseigner le code suivant : ${code}</p>
        <p>Si vous n'avez pas demand√© ce changement, veuillez contacter notre service client√®le imm√©diatement.</p>
        <p>Merci,</p>
        <p>L'√©quipe de techheaven.com</p>
        `
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        throw Error("Erreur lors de l\'envoi de l\'email");
    }
}

export const sendNewsletterEmail = async (userEmail) => {
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'D√©couvrez les Derni√®res Innovations avec TechHeaven !',
        html: `
          <h1>Bienvenue chez TechHeaven</h1>
          <p>Bonjour,</p>
          <p>Nous sommes ravis de vous accueillir dans notre communaut√© de passionn√©s de technologie. Chez TechHeaven, nous nous engageons √† vous fournir les derni√®res nouvelles et innovations technologiques pour am√©liorer votre quotidien.</p>
          <h2>Les Derni√®res Nouveaut√©s</h2>
          <ul>
            <li><strong>Gadget de la Semaine:</strong> D√©couvrez notre nouveau smartphone avec des fonctionnalit√©s r√©volutionnaires.</li>
            <li><strong>Conseils et Astuces:</strong> Apprenez comment optimiser l'utilisation de vos appareils pour une efficacit√© maximale.</li>
            <li><strong>√âv√©nements √† Venir:</strong> Ne manquez pas nos webinaires et ateliers exclusifs pour en savoir plus sur les tendances technologiques.</li>
          </ul>
          <h2>Rejoignez la Communaut√© TechHeaven</h2>
          <p>Participez √† nos forums de discussion, √©changez avec d'autres passionn√©s et obtenez des r√©ponses √† toutes vos questions techniques. Ensemble, nous pouvons pousser les limites de la technologie.</p>
          <p>Pour plus d'informations, visitez notre site web : <a href="https://tech-heaven.fr">TechHeaven</a></p>
          <p>Merci de faire partie de notre communaut√© !</p>
          <p>Cordialement,</p>
          <p>L'√©quipe TechHeaven</p>
        `
      };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.log(error.message)
        console.error("üöÄ ~ sendNewsletterEmail ~ error:", error)
        throw Error("Erreur lors de l\'envoi de l\'email");
    }
}

export const sendInvoiceEmail = async (userEmail, invoice) => {
    const pdfPath = generateInvoicePDF(invoice);
    
    const mailOptions = {
        from: COMPANY_MAIL,
        to: userEmail,
        subject: 'Votre Facture',
        html: `
        <h1>Votre Facture</h1>
        <p>Bonjour,</p>
        <p>Merci pour votre achat. Vous trouverez ci-dessous les d√©tails de votre facture en pi√®ce jointe :</p>
        <p>Montant total : ${invoice.amount}</p>
        <p>Merci,</p>
        <p>L'√©quipe de techheaven.com</p>
        `,
        attachments: [
            {
                filename: `invoice_${invoice.id}.pdf`,
                path: pdfPath,
                contentType: 'application/pdf'
            }
        ]
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        throw new Error("Erreur lors de l'envoi de la facture par email");
    } finally {
        // Supprimer le fichier PDF apr√®s envoi pour √©viter d'encombrer le disque
        fs.unlinkSync(pdfPath);
    }
}


export default transporter;